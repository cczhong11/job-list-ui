{"version":3,"sources":["JobTable.tsx","JobFront.tsx","JobPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_JOB_INVENTORY","gql","JobTable","props","useQuery","variables","experience","job_type","type","date","location","loading","data","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","TableBody","Job","map","item","scope","Date","Title","Company","City","State","ApplyLink","href","Link","Id","JobFront","JobPage","App","client","ApolloClient","uri","cache","InMemoryCache","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAmCMA,EAAoBC,cAAH,oXAiBR,SAASC,EAASC,GAAe,IAAD,IACjBC,mBACtBJ,EACA,CAAEK,UAAW,CAAEC,WAAW,SACtBC,SAASJ,EAAMK,KACfC,KAAK,IACLC,SAAS,MALTC,EADmC,EACnCA,QAASC,EAD0B,EAC1BA,KAOjB,OAAO,gCACP,gDACCD,EACC,4CAEE,cAACE,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACA,eAACC,EAAA,EAAD,CAAOC,UAAU,QAAQC,aAAW,eAApC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,qBACA,cAACA,EAAA,EAAD,wBACA,cAACA,EAAA,EAAD,sBACA,cAACA,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,wBAGJ,cAACC,EAAA,EAAD,WACG,iBAACV,QAAD,IAACA,OAAD,EAACA,EAAMW,WAAP,QAAY,IAAIC,KAAI,SAACC,GAAD,OACnB,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWP,UAAU,KAAKY,MAAM,MAAhC,SACGD,EAAKE,OAER,cAACN,EAAA,EAAD,UAAaI,EAAKG,QAClB,cAACP,EAAA,EAAD,UAAaI,EAAKI,UAClB,cAACR,EAAA,EAAD,UAAaI,EAAKK,OAClB,cAACT,EAAA,EAAD,UAAaI,EAAKM,QAClB,cAACV,EAAA,EAAD,UAA8B,KAAjBI,EAAKO,UAAgB,mBAAGC,KAAMR,EAAKO,UAAd,kBAAoC,mBAAGC,KAAMR,EAAKS,KAAd,sBARzDT,EAAKU,iBC9EnB,SAASC,IACpB,OAAO,gFCEI,SAASC,EAAQlC,GAC5B,OAAQ,gCAAK,cAACiC,EAAD,IAAY,cAAClC,EAAD,CAAUM,KAAML,EAAMK,U,oBC4BpC8B,MAxBf,WACI,IAAMC,EAAS,IAAIC,eAAa,CAC5BC,IAAK,qCACLC,MAAO,IAAIC,kBAEjB,OACE,cAAC,iBAAD,CAAgBJ,OAAQA,EAAxB,SACA,qBAAKtB,UAAU,MAAf,SACA,cAAC,IAAD,UACG,gCAEA,cAAC,IAAD,CAAO2B,KAAK,YAAZ,SACO,cAACP,EAAD,CAAS7B,KAAK,eAEhB,cAAC,IAAD,CAAOoC,KAAK,MAAZ,SACE,cAACP,EAAD,CAAS7B,KAAK,mBCVbqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d244eb89.chunk.js","sourcesContent":["import { useQuery, gql } from '@apollo/client';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport type {TParams} from './JobPage';\nimport { makeStyles } from '@material-ui/core/styles';\ninterface JobInfo {\n    Id: number,\n    Date: string,\n    Title: string,\n    Company: string,\n    Review: number,\n    Experience: string,\n    Citizen: boolean,\n    Fulltime: string,\n    City: string,\n    State: string,\n    Link: string,\n    Type: string,\n    ApplyLink: string,  \n}\ninterface Jobs {\n    Job:JobInfo[]\n}\n\ninterface JobQueryInput {\n    experience:string,\n    job_type:string,\n    date:number,\n    location:string,             \n}\nconst GET_JOB_INVENTORY = gql`\n  query FindJob($experience: String!, $job_type: String!, $location:String!,$date:Int!) {\n    Job(experience:$experience, job_type:$job_type, location:$location, date:$date) {\n        Id\n        Date\n        Title\n        Company\n        Experience\n        City\n        State\n        Link\n        Type\n        ApplyLink\n    }\n  }\n`;\n\nexport default function JobTable(props:TParams){\n    const { loading, data } = useQuery<Jobs, JobQueryInput>(\n        GET_JOB_INVENTORY,\n        { variables: { experience:\"junior\",\n            job_type:props.type,\n            date:100,\n            location:\"\",  } }\n      );\n    return <div>\n    <h3>Available Jobs</h3>\n    {loading ? (\n      <p>Loading ...</p>\n    ) : (\n        <TableContainer component={Paper}>\n        <Table className=\"class\" aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell> Date </TableCell>\n              <TableCell >Job Title</TableCell>\n              <TableCell >Company</TableCell>\n              <TableCell >City</TableCell>\n              <TableCell >State</TableCell>\n              <TableCell >Link</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(data?.Job??[]).map((item) => (\n              <TableRow key={item.Id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {item.Date}\n                </TableCell>\n                <TableCell >{item.Title}</TableCell>\n                <TableCell >{item.Company}</TableCell>\n                <TableCell >{item.City}</TableCell>\n                <TableCell >{item.State}</TableCell>\n                <TableCell >{item.ApplyLink!==\"\"?(<a href={item.ApplyLink}>link</a>):(<a href={item.Link}>link</a>)}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )}\n  </div>;\n}","import React from 'react';\nexport default function JobFront() {\n    return <h1>Here we show the latest junior job in Bay Area</h1>;\n}","import { RouteComponentProps} from \"react-router-dom\";\nimport JobTable from './JobTable';\nimport JobFront from './JobFront';\nexport type TParams = { type: string };\nexport default function JobPage(props:TParams){\n    return (<div><JobFront /><JobTable type={props.type} /></div>);\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport JobPage from './JobPage';\nimport { ApolloProvider } from '@apollo/client';\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { HashRouter as Router, Route, Link, RouteComponentProps} from \"react-router-dom\";\ntype TParams = { id: number };\nfunction App() {\n    const client = new ApolloClient({\n        uri: 'http://44.232.253.221:4001/graphql',\n        cache: new InMemoryCache()\n      });\n  return (\n    <ApolloProvider client={client}>\n    <div className=\"App\">\n    <Router>\n       <div>\n         \n       <Route path=\"/software\">\n              <JobPage type=\"software\" />\n            </Route>\n            <Route path=\"/ux\">\n              <JobPage type=\"ux\" />\n            </Route>\n       </div>\n     </Router>\n    </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}