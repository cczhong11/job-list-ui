{"version":3,"sources":["JobTable.tsx","JobFront.tsx","JobPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_JOB_INVENTORY","gql","JobTable","props","useQuery","variables","experience","type","includes","job_type","date","location","loading","data","TableContainer","component","Paper","className","Table","aria-label","TableHead","TableRow","TableCell","TableBody","Job","map","item","scope","Date","Title","Company","City","State","ApplyLink","href","Link","Id","JobFront","job_name","name","target","src","alt","height","JobPage","App","client","ApolloClient","uri","cache","InMemoryCache","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAmCMA,EAAoBC,cAAH,6ZA2BR,SAASC,EAASC,GAAiB,IAAD,IACrBC,mBAA8BJ,EAAmB,CACzEK,UAAW,CACTC,WAAYH,EAAMI,KAAKC,SAAS,UAAY,SAAW,SACvDC,SAAUN,EAAMI,KAChBG,KAAM,IACNC,SAAU,MALNC,EADuC,EACvCA,QAASC,EAD8B,EAC9BA,KAQjB,OACE,gCACE,gDACCD,EACC,4CAEA,cAACE,EAAA,EAAD,CAAgBC,UAAWC,IAAOC,UAAU,UAA5C,SACE,eAACC,EAAA,EAAD,CAAOD,UAAU,QAAQE,aAAW,eAApC,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,qBACA,cAACA,EAAA,EAAD,wBACA,cAACA,EAAA,EAAD,sBACA,cAACA,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,oBACA,cAACA,EAAA,EAAD,wBAGJ,cAACC,EAAA,EAAD,WACG,iBAACV,QAAD,IAACA,OAAD,EAACA,EAAMW,WAAP,QAAc,IAAIC,KAAI,SAACC,GAAD,OACrB,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWP,UAAU,KAAKY,MAAM,MAAhC,SACGD,EAAKE,OAER,cAACN,EAAA,EAAD,UAAYI,EAAKG,QACjB,cAACP,EAAA,EAAD,UAAYI,EAAKI,UACjB,cAACR,EAAA,EAAD,UAAYI,EAAKK,OACjB,cAACT,EAAA,EAAD,UAAYI,EAAKM,QACjB,cAACV,EAAA,EAAD,UACsB,KAAnBI,EAAKO,UACJ,mBAAGC,KAAMR,EAAKO,UAAd,kBAEA,mBAAGC,KAAMR,EAAKS,KAAd,sBAZST,EAAKU,iBCzFrB,SAASC,EAASlC,GAC/B,IAAImC,EAAW,GACf,OAAQnC,EAAMoC,MACZ,IAAK,KACHD,EAAW,mBACX,MAEF,IAAK,WACHA,EAAW,oBACX,MAEF,IAAK,kBACHA,EAAW,2BACX,MAEF,IAAK,OACHA,EAAW,iBAIf,OACE,qBAAKrB,UAAU,UAAf,SACE,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,qBAAIA,UAAU,iBAAd,UACGqB,EACD,uBAAMrB,UAAU,qBAAhB,UACE,uBACCd,EAAMoC,KAAK/B,SAAS,UACjB,oBACA,0BAGR,oBAAGS,UAAU,sBAAb,mBACQ,0CADR,cACyCqB,EADzC,kEAIA,uBACA,gGACA,mBAAGJ,KAAK,uCAAuCM,OAAO,SAAtD,SACE,qBACEC,IAAI,6DACJC,IAAI,kBACJzB,UAAU,kBAGd,0BAEF,qBAAKA,UAAU,SACf,qBAAKA,UAAU,OAAf,SACE,qBACEwB,IAAI,8FACJC,IAAI,GACJC,OAAO,eCnDJ,SAASC,EAAQzC,GAC9B,OACE,gCACE,cAACkC,EAAD,CAAUE,KAAMpC,EAAMI,OACtB,cAACL,EAAD,CAAUK,KAAMJ,EAAMI,U,oBCmCbsC,MA7Bf,WACE,IAAMC,EAAS,IAAIC,eAAa,CAC9BC,IAAK,yCACLC,MAAO,IAAIC,kBAEb,OACE,cAAC,iBAAD,CAAgBJ,OAAQA,EAAxB,SACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,IAAD,UACE,gCACE,cAAC,IAAD,CAAOkC,KAAK,YAAZ,SACE,cAACP,EAAD,CAASrC,KAAK,eAEhB,cAAC,IAAD,CAAO4C,KAAK,mBAAZ,SACE,cAACP,EAAD,CAASrC,KAAK,sBAEhB,cAAC,IAAD,CAAO4C,KAAK,MAAZ,SACE,cAACP,EAAD,CAASrC,KAAK,SAEhB,cAAC,IAAD,CAAO4C,KAAK,QAAZ,SACE,cAACP,EAAD,CAASrC,KAAK,qBCpBb6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.88ca94d7.chunk.js","sourcesContent":["import { useQuery, gql } from \"@apollo/client\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport type { TParams } from \"./JobPage\";\nimport { makeStyles } from \"@material-ui/core/styles\";\ninterface JobInfo {\n  Id: number;\n  Date: string;\n  Title: string;\n  Company: string;\n  Review: number;\n  Experience: string;\n  Citizen: boolean;\n  Fulltime: string;\n  City: string;\n  State: string;\n  Link: string;\n  Type: string;\n  ApplyLink: string;\n}\ninterface Jobs {\n  Job: JobInfo[];\n}\n\ninterface JobQueryInput {\n  experience: string;\n  job_type: string;\n  date: number;\n  location: string;\n}\nconst GET_JOB_INVENTORY = gql`\n  query FindJob(\n    $experience: String!\n    $job_type: String!\n    $location: String!\n    $date: Int!\n  ) {\n    Job(\n      experience: $experience\n      job_type: $job_type\n      location: $location\n      date: $date\n    ) {\n      Id\n      Date\n      Title\n      Company\n      Experience\n      City\n      State\n      Link\n      Type\n      ApplyLink\n    }\n  }\n`;\n\nexport default function JobTable(props: TParams) {\n  const { loading, data } = useQuery<Jobs, JobQueryInput>(GET_JOB_INVENTORY, {\n    variables: {\n      experience: props.type.includes(\"senior\") ? \"senior\" : \"junior\",\n      job_type: props.type,\n      date: 100,\n      location: \"\",\n    },\n  });\n  return (\n    <div>\n      <h3>Available Jobs</h3>\n      {loading ? (\n        <p>Loading ...</p>\n      ) : (\n        <TableContainer component={Paper} className=\"wrapper\">\n          <Table className=\"class\" aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell> Date </TableCell>\n                <TableCell>Job Title</TableCell>\n                <TableCell>Company</TableCell>\n                <TableCell>City</TableCell>\n                <TableCell>State</TableCell>\n                <TableCell>Link</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {(data?.Job ?? []).map((item) => (\n                <TableRow key={item.Id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {item.Date}\n                  </TableCell>\n                  <TableCell>{item.Title}</TableCell>\n                  <TableCell>{item.Company}</TableCell>\n                  <TableCell>{item.City}</TableCell>\n                  <TableCell>{item.State}</TableCell>\n                  <TableCell>\n                    {item.ApplyLink !== \"\" ? (\n                      <a href={item.ApplyLink}>link</a>\n                    ) : (\n                      <a href={item.Link}>link</a>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nexport type Props = { name: string };\nexport default function JobFront(props: Props) {\n  var job_name = \"\";\n  switch (props.name) {\n    case \"ux\": {\n      job_name = \"Product Designer\";\n      break;\n    }\n    case \"software\": {\n      job_name = \"Software Engineer\";\n      break;\n    }\n    case \"software_senior\": {\n      job_name = \"Seinor Software Engineer\";\n      break;\n    }\n    case \"data\": {\n      job_name = \"Data Scientist\";\n      break;\n    }\n  }\n  return (\n    <div className=\"wrapper\">\n      <div className=\"row\">\n        <div className=\"col1\">\n          <h1 className=\"hero-heading-2\">\n            {job_name}\n            <span className=\"text-span-h1-punct\">\n              <br />\n              {props.name.includes(\"senior\")\n                ? \"Senior Jobs in US\"\n                : \"Junior Jobs in US\"}\n            </span>\n          </h1>\n          <p className=\"hero-paragraph-ver2\">\n            It is <strong>hard</strong> to find a {job_name} now. I created this\n            site to help people to find their jobs.\n          </p>\n          <br />\n          <p>If you find this website useful, please support my development.</p>\n          <a href=\"https://www.buymeacoffee.com/cczhong\" target=\"_blank\">\n            <img\n              src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\"\n              alt=\"Buy Me A Coffee\"\n              className=\"buymecoffee\"\n            />\n          </a>\n          <br />\n        </div>\n        <div className=\"col2\"></div>\n        <div className=\"col3\">\n          <img\n            src=\"https://cdn.aarp.net/content/dam/aarp/work/job-search/2020/08/1140-new-job-keyboard.web.jpg\"\n            alt=\"\"\n            height=\"300\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { RouteComponentProps } from \"react-router-dom\";\nimport JobTable from \"./JobTable\";\nimport JobFront from \"./JobFront\";\nexport type TParams = { type: string };\nexport default function JobPage(props: TParams) {\n  return (\n    <div>\n      <JobFront name={props.type} />\n      <JobTable type={props.type} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport JobPage from \"./JobPage\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  RouteComponentProps,\n} from \"react-router-dom\";\ntype TParams = { id: number };\nfunction App() {\n  const client = new ApolloClient({\n    uri: \"https://job_server.tczhong.com/graphql\",\n    cache: new InMemoryCache(),\n  });\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Router>\n          <div>\n            <Route path=\"/software\">\n              <JobPage type=\"software\" />\n            </Route>\n            <Route path=\"/software_senior\">\n              <JobPage type=\"software_senior\" />\n            </Route>\n            <Route path=\"/ux\">\n              <JobPage type=\"ux\" />\n            </Route>\n            <Route path=\"/data\">\n              <JobPage type=\"data\" />\n            </Route>\n          </div>\n        </Router>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}